#BlueJ class context
comment0.target=Piece
comment0.text=\n\ \ \ An\ immutable\ representation\ of\ a\ tetris\ piece\ in\ a\ particular\ rotation.\n\ \ \ Each\ piece\ is\ defined\ by\ the\ blocks\ that\ make\ up\ its\ body.\n\ \ \ See\ the\ Tetris-Architecture.html\ for\ an\ overview.\n\ \n\ \ \ This\ is\ the\ starter\ file\ version\ --\ a\ few\ simple\ things\ are\ filled\ in\ already\n\ \n\ \ \ @author\tNick\ Parlante\n\ \ \ @author\ \ Eric\ Chown\n\ \ \ @version\t1.0,\ Mar\ 1,\ 2001\n\ \ \ @version\ 1.2\ \ April\ 8,\ 2012\n
comment1.params=points
comment1.target=Piece(java.awt.Point[])
comment1.text=\n\ \ \ \ \ \ \ Defines\ a\ new\ piece\ given\ the\ Points\ that\ make\ up\ its\ body.\n\ \ \ \ \ \ \ Makes\ its\ own\ copy\ of\ the\ array\ and\ the\ Point\ inside\ it.\n\ \ \ \ \ \ \ Does\ not\ set\ up\ the\ rotations.\n\t\ \n\ \ \ \ \ \ \ This\ constructor\ is\ PRIVATE\ --\ if\ a\ client\n\ \ \ \ \ \ \ wants\ a\ piece\ object,\ they\ must\ use\ Piece.getPieces().\n
comment10.params=string
comment10.target=java.awt.Point[]\ parsePoints(java.lang.String)
comment10.text=\n\ \ \ \ \ \ \ Given\ a\ string\ of\ x,y\ pairs\ ("0\ 0\t0\ 1\t0\ 2\t1\ 0"),\ parses\n\ \ \ \ \ \ \ the\ points\ into\ a\ Point[]\ array.\n\ \ \ \ \ \ \ (Provided\ code)\n
comment2.params=
comment2.target=int\ getWidth()
comment2.text=\n\ \ \ \ \ \ \ Returns\ the\ width\ of\ the\ piece\ measured\ in\ blocks.\n
comment3.params=
comment3.target=int\ getHeight()
comment3.text=\n\ \ \ \ \ \ \ Returns\ the\ height\ of\ the\ piece\ measured\ in\ blocks.\n
comment4.params=
comment4.target=java.awt.Point[]\ getBody()
comment4.text=\n\ \ \ \ \ \ \ Returns\ a\ pointer\ to\ the\ piece's\ body.\ The\ caller\n\ \ \ \ \ \ \ should\ not\ modify\ this\ array.\n
comment5.params=
comment5.target=int[]\ getSkirt()
comment5.text=\n\ \ \ \ \ \ \ Returns\ a\ pointer\ to\ the\ piece's\ skirt.\ For\ each\ x\ value\n\ \ \ \ \ \ \ across\ the\ piece,\ the\ skirt\ gives\ the\ lowest\ y\ value\ in\ the\ body.\n\ \ \ \ \ \ \ This\ useful\ for\ computing\ where\ the\ piece\ will\ land.\n\ \ \ \ \ \ \ The\ caller\ should\ not\ modify\ this\ array.\n
comment6.params=
comment6.target=Piece\ nextRotation()
comment6.text=\n\ \ \ \ \ \ \ Returns\ a\ piece\ that\ is\ 90\ degrees\ counter-clockwise\n\ \ \ \ \ \ \ rotated\ from\ the\ receiver.\n\t\ \n\ \ \ \ \ \ \ <p>Implementation\:\n\ \ \ \ \ \ \ The\ Piece\ class\ pre-computes\ all\ the\ rotations\ once.\n\ \ \ \ \ \ \ This\ method\ just\ hops\ from\ one\ pre-computed\ rotation\n\ \ \ \ \ \ \ to\ the\ next\ in\ constant\ time.\n
comment7.params=other
comment7.target=boolean\ equals(Piece)
comment7.text=\n\ \ \ \ \ \ \ Returns\ true\ if\ two\ pieces\ are\ the\ same\ --\n\ \ \ \ \ \ \ their\ bodies\ contain\ the\ same\ points.\n\ \ \ \ \ \ \ Interestingly,\ this\ is\ not\ the\ same\ as\ having\ exactly\ the\n\ \ \ \ \ \ \ same\ body\ arrays,\ since\ the\ points\ may\ not\ be\n\ \ \ \ \ \ \ in\ the\ same\ order\ in\ the\ bodies.\ Used\ internally\ to\ detect\n\ \ \ \ \ \ \ if\ two\ rotations\ are\ effectively\ the\ same.\n
comment8.params=current
comment8.target=Piece\ pieceRow(Piece)
comment8.text=\n\ \ \ \ \ \ \ Pre-computes\ all\ of\ the\ rotations\ of\ the\ piece\n
comment9.params=
comment9.target=Piece[]\ getPieces()
comment9.text=\n\ \ \ \ \ \ \ Returns\ an\ array\ containing\ the\ first\ rotation\ of\n\ \ \ \ \ \ \ each\ of\ the\ 7\ standard\ tetris\ pieces.\n\ \ \ \ \ \ \ The\ next\ (counterclockwise)\ rotation\ can\ be\ obtained\n\ \ \ \ \ \ \ from\ each\ piece\ with\ the\ {@link\ \#nextRotation()}\ message.\n\ \ \ \ \ \ \ In\ this\ way,\ the\ client\ can\ iterate\ through\ all\ the\ rotations\n\ \ \ \ \ \ \ until\ eventually\ getting\ back\ to\ the\ first\ rotation.\n
numComments=11
